{"version":3,"sources":["assets/sayKaren_logo-white_8.1.2019.png","components/app/numberConverter.js","components/app/DataRevealed.js","components/app/Footer.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","numberConverter","value","parseFloat","toFixed","RevealData","paidToBank","extraCalcPaidToBank","interestPaidArray","mortgage","extraInterestPaidArray","length","reduce","accu","cur","totalPaid","parseInt","extraTotalPaid","className","id","style","width","backgroundColor","border","color","Footer","href","target","rel","src","sayKarenLogo","alt","todayDate","Date","App","getMonth","getFullYear","monthArray","useState","principal","setPrincipal","interestRate","setInterestRate","monthlyPayment","setMonthlyPayment","extraPayment","setExtraPayment","extraPrincipalPaidArray","setExtraPrincipalPaidArray","setExtraInterestPaidArray","extraNewEndingPrincipalArray","setExtraNewEndingPrincipalArray","principalPaidArray","setPrincipalPaidArray","setInterestPaidArray","newEndingPrincipalArray","setNewEndingPrincipalArray","monthDate","setMonthDate","generateCalculation","currentPrincipal","processEachPayment","num","principalPaid","paymentInterestPaid","balance","monthDateIndex","Math","floor","extraCalculation","currentExtraPrincipal","processEachExtraPayment","principalExtraPaid","paymentExtraInterestPaid","extraBalance","handleReset","e","setEvent","useEffect","setTimeout","type","name","onChange","currentTarget","undefined","onClick","window","location","reload","map","index","key","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70206eec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sayKaren_logo-white_8.1.2019.d0827d01.png\";","const numberConverter =(value) =>{\n    return parseFloat((value).toFixed(2));\n};\n\nexport default numberConverter;","import React, { useState } from 'react';\nimport numberConverter from './numberConverter';\n\nconst RevealData = ({interestPaidArray, mortgage, extraInterestPaidArray})=>{\n\n    let paidToBank;\n    let extraCalcPaidToBank;\n\n    // const arrayResults = interestPaidArray;\n    if(interestPaidArray.length > 0){\n        paidToBank = numberConverter(interestPaidArray.reduce((accu, cur)=>(\n\n            accu + cur\n        )));\n\n\n    }\n    if(extraInterestPaidArray.length > 0){\n        extraCalcPaidToBank = numberConverter(extraInterestPaidArray.reduce((accu,cur)=>(\n            accu + cur\n        )));\n    }\n    const totalPaid = paidToBank + parseInt(mortgage);\n    const extraTotalPaid = extraCalcPaidToBank + parseInt(mortgage);\n\n    return(\n\n        <section >\n            {extraInterestPaidArray.length>0 && <div className=\"dataForm\">\n                <div className=\"dataSection\">\n                    You Paid the Bank ${extraCalcPaidToBank} you saved ${(paidToBank-extraCalcPaidToBank).toFixed(2)}\n                </div>\n                <div className=\"dataSection\">\n                    Total you paid ${extraTotalPaid} for a loan of ${mortgage}\n                </div>\n                <div className=\"bar dataSection\" >\n                    <div id=\"principalBar\" style={{width: `{${mortgage}/${extraTotalPaid}}%`, backgroundColor: '#282c34', border: '4px solid white'}}>\n                        ${mortgage} Mortgage\n                    </div>\n                    <div id=\"interestPaid\" style={{width: `{${extraCalcPaidToBank}/${extraTotalPaid}}%`, backgroundColor: '#61dafb', border: '4px solid white', color: '#282c34' }}>\n                        ${extraCalcPaidToBank} Interest Paid\n                    </div>\n                </div>\n                <div className=\"dataSection\">\n                    Will take you {extraInterestPaidArray.length} months ({(extraInterestPaidArray.length/12).toFixed(2)} years)to pay off this loan\n                </div>\n            </div>}\n            {interestPaidArray.length>0 && <div className=\"dataForm\">\n                <div className=\"dataSection\">\n                    You Paid the Bank ${paidToBank}\n                </div>\n                <div className=\"dataSection\">\n                    Total you paid ${totalPaid} for a loan of ${mortgage}\n                </div>\n                <div className=\"bar dataSection\" >\n                    <div id=\"principalBar\" style={{width: `{${mortgage}/${totalPaid}}%`, backgroundColor: '#282c34', border: '4px solid white'}}>\n                        ${mortgage} Mortgage\n                    </div>\n                    <div id=\"interestPaid\" style={{width: `{${paidToBank}/${totalPaid}}%`, backgroundColor: '#61dafb', border: '4px solid white', color: '#282c34' }}>\n                        ${paidToBank} Interest Paid\n                    </div>\n                </div>\n                <div className=\"dataSection\">\n                    Will take you {interestPaidArray.length} months ({(interestPaidArray.length/12).toFixed(2)} years)to pay off this loan\n                </div>\n            </div>}\n        </section>\n    )\n}\n\nexport default RevealData;","import React from 'react';\nimport sayKarenLogo from '../../assets/sayKaren_logo-white_8.1.2019.png'\n\nconst Footer= ()=> (\n\n\n    <footer\n        id=\"footer\"\n        className=\"footerDetails\"\n    >\n        Website created by:\n        <a\n            href=\"http://saykaren.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            <img src={sayKarenLogo}\n                 className=\"footerDetails\"\n                 id=\"sayKarenLogo\"\n                 alt=\"sayKaren.com\"\n            />\n        </a>\n    </footer>\n\n\n);\n\nexport default Footer","import React, { useState, useEffect } from 'react';\nimport '../../styling/App1.scss';\nimport numberConverter from './numberConverter';\nimport RevealData from './DataRevealed';\nimport Footer from './Footer';\n\n///Dates\nlet todayDate = new Date();\nlet monthToday = todayDate.getMonth();\nlet yearToday = todayDate.getFullYear();\n\nconst titleInfo = [\n  'Date',\n  'Principal Paid',\n  'Interest Paid',\n  'Ending Principal',\n];\nconst titleExtraInfo = ['Principal Paid', 'Interest Paid', 'Ending Principal'];\n\nconst App = () => {\n\n  let monthArray = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n  let yearArray = [2020];\n\n  // // //User Input\n  const [principal, setPrincipal] = useState(172000);\n  const [interestRate, setInterestRate] = useState(3.75);\n  const [monthlyPayment, setMonthlyPayment] = useState(1500);\n  const [extraPayment, setExtraPayment] = useState(100);\n\n  //Extra payment\n  const [extraPrincipalPaidArray, setExtraPrincipalPaidArray] = useState([]);\n  const [extraInterestPaidArray, setExtraInterestPaidArray] = useState([]);\n  const [\n    extraNewEndingPrincipalArray,\n    setExtraNewEndingPrincipalArray,\n  ] = useState([]);\n\n  //Update Input\n  const [principalPaidArray, setPrincipalPaidArray] = useState([]);\n  const [interestPaidArray, setInterestPaidArray] = useState([]);\n  const [newEndingPrincipalArray, setNewEndingPrincipalArray] = useState([]);\n  const [monthDate, setMonthDate] = useState([]);\n\n  const generateCalculation = () => {\n    let currentPrincipal;\n    if (newEndingPrincipalArray.length > 0) {\n      currentPrincipal = numberConverter(\n          newEndingPrincipalArray[newEndingPrincipalArray.length - 1],\n      );\n    }\n\n    const processEachPayment = (num)=>{\n      let paymentInterestPaid = numberConverter(\n          currentPrincipal * ((interestRate * 0.01) / 12),\n      );\n      let principalPaid;\n      ////0 is last payment\n      if(num == 0){\n        principalPaid = numberConverter(currentPrincipal);\n      }else{\n        principalPaid = numberConverter(monthlyPayment - paymentInterestPaid);\n      }\n      let balance = numberConverter(currentPrincipal - principalPaid);\n      setPrincipalPaidArray([...principalPaidArray, principalPaid]);\n      setInterestPaidArray([...interestPaidArray, paymentInterestPaid]);\n      setNewEndingPrincipalArray([...newEndingPrincipalArray, balance]);\n\n      let monthDateIndex =\n          monthDate.length - Math.floor(monthDate.length / 12) * 12;\n      setMonthDate([...monthDate, monthArray[monthDateIndex]]);\n    }\n\n    switch (true) {\n      case (newEndingPrincipalArray.length < 1):\n        setNewEndingPrincipalArray([principal]);\n        break;\n      case (currentPrincipal > monthlyPayment &&\n          newEndingPrincipalArray.length >= 1):\n        processEachPayment(1);\n        break;\n      case (currentPrincipal < monthlyPayment) :\n        processEachPayment(0);\n        break;\n      case (newEndingPrincipalArray[newEndingPrincipalArray.length - 1] <= 0):\n        break;\n      default:\n        break;\n    }\n\n  };\n\n  const extraCalculation = ()=>{\n    ///extra payment calculations\n    let currentExtraPrincipal;\n    if (extraNewEndingPrincipalArray.length > 0) {\n      currentExtraPrincipal = numberConverter(\n          extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length - 1],\n      );\n    }\n\n    const processEachExtraPayment =(num)=>{\n      let paymentExtraInterestPaid = numberConverter(\n          currentExtraPrincipal * ((interestRate * 0.01) / 12),\n      );\n      let principalExtraPaid;\n      ///Last payment 0\n      if(num == 0){\n        principalExtraPaid = numberConverter(currentExtraPrincipal);\n      }else{\n        principalExtraPaid = numberConverter(extraPayment + monthlyPayment - paymentExtraInterestPaid );\n      }\n      let extraBalance = numberConverter(currentExtraPrincipal - principalExtraPaid);\n      setExtraPrincipalPaidArray([...extraPrincipalPaidArray, principalExtraPaid]);\n      setExtraInterestPaidArray([...extraInterestPaidArray, paymentExtraInterestPaid]);\n      setExtraNewEndingPrincipalArray([...extraNewEndingPrincipalArray, extraBalance]);\n    }\n\n    switch (true) {\n      case (extraNewEndingPrincipalArray.length < 1):\n        setExtraNewEndingPrincipalArray([principal]);\n        break;\n      case (currentExtraPrincipal > (monthlyPayment + extraPayment) &&\n          extraNewEndingPrincipalArray.length >= 1):\n        processEachExtraPayment(1);\n        break;\n      case (currentExtraPrincipal < (monthlyPayment + extraPayment) && extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length - 1] > 0) :\n        processEachExtraPayment(0);\n        break;\n      case (extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length - 1] <= 0):\n        break;\n      default:\n        break;\n    }\n\n  }\n  const handleReset = (e, setEvent)=>{\n    let result = parseFloat(e);\n    setEvent(result);\n  }\n\n  useEffect(()=>{\n    if(newEndingPrincipalArray.length>=1 && newEndingPrincipalArray[newEndingPrincipalArray.length-1]>0){\n      setTimeout(generateCalculation, 100);\n    }\n  }, [newEndingPrincipalArray]);\n\n  useEffect(()=>{\n    if(extraNewEndingPrincipalArray.length>=1 && extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length-1]>0){\n      setTimeout(extraCalculation, 100);\n    }\n  }, [extraNewEndingPrincipalArray]);\n\n  const calculate =()=>{\n    generateCalculation()\n    if(extraPayment>0){\n      extraCalculation();\n    }\n  }\n\n  return (\n      <section className=\"App\">\n        <div id=\"inputSection\">\n          <form className=\"inputForm\">\n            <label className=\"inputSection\">\n              Mortage:\n              {(newEndingPrincipalArray.length <= 1 && (\n                  <input\n                      type=\"number\"\n                      name=\"Mortgage\"\n                      value={principal}\n                      onChange={(e) =>\n                          handleReset(e.currentTarget.value, setPrincipal)\n                      }\n                  ></input>\n              )) || <span>{principal}</span>}\n            </label>\n            <label className=\"inputSection\">\n              Interest Rate:\n              {(newEndingPrincipalArray.length <= 1 && (\n                  <input\n                      type=\"number\"\n                      name=\"Interest\"\n                      value={interestRate}\n                      onChange={(e) =>\n                          handleReset(e.currentTarget.value, setInterestRate)\n                      }\n                  ></input>\n              )) || <span>{interestRate}</span>}\n            </label>\n            <label className=\"inputSection\">\n              Monthly Payment:\n              {(newEndingPrincipalArray.length <= 1 && (\n                  <input\n                      type=\"number\"\n                      name=\"MonthlyPayment\"\n                      value={monthlyPayment}\n                      onChange={(e) =>\n                          // handleResetMonthlyPayment(e.currentTarget.value)\n                          handleReset(e.currentTarget.value, setMonthlyPayment)\n                      }\n                  ></input>\n              )) || <span>{monthlyPayment}</span>}\n            </label>\n\n            <label className=\"inputSection\">\n              Extra Monthly Payment:\n              {(newEndingPrincipalArray.length <= 1 && (\n                  <input\n                      type=\"number\"\n                      name=\"ExtraMonthlyPayment\"\n                      value={extraPayment}\n                      onChange={(e) =>\n                          handleReset(e.currentTarget.value, setExtraPayment)\n                      }\n                  ></input>\n              )) || <span>{extraPayment}</span>}\n            </label>\n          </form>\n        </div>\n        {(newEndingPrincipalArray[newEndingPrincipalArray.length - 1] > 0 ||\n            newEndingPrincipalArray[newEndingPrincipalArray.length - 1] ===\n            undefined) && (\n            <button onClick={() => calculate()}>Calculate</button>\n        )}\n\n        <button onClick={() => window.location.reload()}>Reset Numbers</button>\n        <RevealData interestPaidArray={interestPaidArray} mortgage={principal} extraInterestPaidArray={extraInterestPaidArray} />\n        {/* ****Below is for extra********* */}\n        { extraNewEndingPrincipalArray.length>1 &&\n        <div id=\"flexTable\">\n          {/*<div className=\"tableCell\">Date</div>*/}\n          <div className=\"tableCell\">\n            Extra Principal\n            <div className=\"cellDetails\">{principal}</div>\n            {extraNewEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n          <div className=\"tableCell\">\n            Monthly Payment\n            {extraNewEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {monthlyPayment}\n                </div>\n            ))}\n          </div>\n\n          <div className=\"tableCell bottomCell\">\n            Interest Paid With Extra Included\n            <div className=\"cellDetails\">-</div>\n            {extraInterestPaidArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n          <div className=\"tableCell\">\n            Principal Paid With Extra Included\n            <div className=\"cellDetails\">-</div>\n            {extraPrincipalPaidArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n\n          <div className=\"tableCell\">\n            Ending Principal with Extra Included\n            {extraNewEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n        </div>\n        }\n\n        <div id=\"flexTable\">\n          {/*<div className=\"tableCell\">Date</div>*/}\n          <div className=\"tableCell\">\n            Principal\n            <div className=\"cellDetails\">{principal}</div>\n            {newEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n          <div className=\"tableCell\">\n            Monthly Payment\n            {newEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {monthlyPayment}\n                </div>\n            ))}\n          </div>\n          <div className=\"tableCell bottomCell\">\n            Interest Paid\n            <div className=\"cellDetails\">-</div>\n            {interestPaidArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n          <div className=\"tableCell\">\n            Principal Paid\n            <div className=\"cellDetails\">-</div>\n            {principalPaidArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n\n          <div className=\"tableCell\">\n            Ending Principal\n            {newEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n        </div>\n        <Footer/>\n      </section>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}