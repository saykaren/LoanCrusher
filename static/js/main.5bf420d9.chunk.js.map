{"version":3,"sources":["assets/sayKaren_logo-white_8.1.2019.png","components/app/numberConverter.js","components/app/DataRevealed.js","components/app/Footer.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","numberConverter","value","parseFloat","toFixed","RevealData","paidInAss","interestPaidArray","mortgage","length","reduce","accu","cur","totalPaid","parseInt","className","id","style","width","backgroundColor","border","color","Footer","href","target","rel","src","sayKarenLogo","alt","todayDate","Date","App","getMonth","getFullYear","useState","setMortgage","interest","setInterest","bankPayment","setBankPayment","monthArray","principal","setPrincipal","interestRate","setInterestRate","monthlyPayment","setMonthlyPayment","extraPayment","extraPrincipalPaidArray","setExtraPrincipalPaidArray","extraInterestPaidArray","setExtraInterestPaidArray","extraNewEndingPrincipalArray","setExtraNewEndingPrincipalArray","principalPaidArray","setPrincipalPaidArray","setInterestPaidArray","newEndingPrincipalArray","setNewEndingPrincipalArray","monthDate","setMonthDate","generateCalculation","currentPrincipal","paymentInterestPaid","principalPaid","balance","monthDateIndex","Math","floor","processPayment","console","log","processLastPayment","extraCurrentPrincipal","extraMonthlyPaymentCal","extraPaymentInterestPaid","extraPrincipalPaid","extraBalance","useEffect","setTimeout","type","name","onChange","e","handleResetMortgageAmount","currentTarget","handleResetInterestRate","handleResetMonthlyPayment","undefined","onClick","window","location","reload","map","index","key","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bf420d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sayKaren_logo-white_8.1.2019.d0827d01.png\";","const numberConverter =(value) =>{\n    return parseFloat((value).toFixed(2));\n};\n\nexport default numberConverter;","import React, { useState } from 'react';\nimport numberConverter from './numberConverter';\n\nconst RevealData = ({interestPaidArray, mortgage})=>{\n\n    let paidInAss;\n\n\n    // const arrayResults = interestPaidArray;\n    if(interestPaidArray.length > 0){\n        paidInAss = numberConverter(interestPaidArray.reduce((accu, cur)=>(\n\n            accu + cur\n        )))\n\n    }\n    const totalPaid = paidInAss + parseInt(mortgage);\n\n    return(\n\n        <section >\n            {interestPaidArray.length>0 && <div className=\"dataForm\">\n                <div className=\"dataSection\">\n                    You Paid the Bank ${paidInAss}\n                </div>\n                <div className=\"dataSection\">\n                    Total you paid ${totalPaid} for a loan of ${mortgage}\n                </div>\n                <div className=\"bar dataSection\" >\n                    <div id=\"principalBar\" style={{width: `{${mortgage}/${totalPaid}}%`, backgroundColor: '#282c34', border: '4px solid white'}}>\n                        ${mortgage} Mortgage\n                    </div>\n                    <div id=\"interestPaid\" style={{width: `{${paidInAss}/${totalPaid}}%`, backgroundColor: '#61dafb', border: '4px solid white', color: '#282c34' }}>\n                        ${paidInAss} Interest Paid\n                    </div>\n                </div>\n                <div className=\"dataSection\">\n                    Will take you {interestPaidArray.length} months to pay off this loan\n                </div>\n            </div>}\n        </section>\n    )\n}\n\nexport default RevealData;","import React from 'react';\nimport sayKarenLogo from '../../assets/sayKaren_logo-white_8.1.2019.png'\n\nconst Footer= ()=> (\n\n\n    <footer\n        id=\"footer\"\n        className=\"footerDetails\"\n    >\n        Website created by:\n        <a\n            href=\"http://saykaren.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            <img src={sayKarenLogo}\n                 className=\"footerDetails\"\n                 id=\"sayKarenLogo\"\n                 alt=\"sayKaren.com\"\n            />\n        </a>\n    </footer>\n\n\n);\n\nexport default Footer","import React, { useState, useEffect } from 'react';\nimport '../../styling/App1.scss';\nimport numberConverter from './numberConverter';\nimport RevealData from './DataRevealed';\nimport Footer from './Footer';\n\n///Dates\nlet todayDate = new Date();\nlet monthToday = todayDate.getMonth();\nlet yearToday = todayDate.getFullYear();\n\nconst titleInfo = [\n  'Date',\n  'Principal Paid',\n  'Interest Paid',\n  'Ending Principal',\n];\nconst titleExtraInfo = ['Principal Paid', 'Interest Paid', 'Ending Principal'];\n\nconst App = () => {\n  const [mortgage, setMortgage] = useState(172000);\n  const [interest, setInterest] = useState(3.75);\n  const [bankPayment, setBankPayment] = useState(1500);\n\n\n  let monthArray = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n  let yearArray = [2020];\n\n  // // //User Input\n  const [principal, setPrincipal] = useState(mortgage);\n  const [interestRate, setInterestRate] = useState(interest);\n  const [monthlyPayment, setMonthlyPayment] = useState(bankPayment);\n  const [extraPayment, setExtraPayment] = useState(100);\n\n  //Extra payment\n  const [extraPrincipalPaidArray, setExtraPrincipalPaidArray] = useState([]);\n  const [extraInterestPaidArray, setExtraInterestPaidArray] = useState([]);\n  const [\n    extraNewEndingPrincipalArray,\n    setExtraNewEndingPrincipalArray,\n  ] = useState([]);\n\n  //Update Input\n  const [principalPaidArray, setPrincipalPaidArray] = useState([]);\n  const [interestPaidArray, setInterestPaidArray] = useState([]);\n  const [newEndingPrincipalArray, setNewEndingPrincipalArray] = useState([]);\n  const [monthDate, setMonthDate] = useState([]);\n\n  const generateCalculation = () => {\n    let currentPrincipal = parseInt(\n        newEndingPrincipalArray[newEndingPrincipalArray.length - 1],\n    );\n\n    const processPayment = () => {\n      let paymentInterestPaid = numberConverter(\n          currentPrincipal * ((interestRate * 0.01) / 12),\n      );\n      let principalPaid = numberConverter(monthlyPayment - paymentInterestPaid);\n      let balance = numberConverter(currentPrincipal - principalPaid);\n      setPrincipalPaidArray([...principalPaidArray, principalPaid]);\n      setInterestPaidArray([...interestPaidArray, paymentInterestPaid]);\n      setNewEndingPrincipalArray([...newEndingPrincipalArray, balance]);\n\n      let monthDateIndex =\n          monthDate.length - Math.floor(monthDate.length / 12) * 12;\n      setMonthDate([...monthDate, monthArray[monthDateIndex]]);\n    };\n\n    const processLastPayment = () => {\n      // console.log(`last payment ${currentPrincipal}`);\n      console.log('in Process Last Payment');\n      let paymentInterestPaid = numberConverter(\n          currentPrincipal * ((interestRate * 0.01) / 12),\n      );\n      let principalPaid = numberConverter(currentPrincipal);\n      let balance = numberConverter(currentPrincipal - principalPaid);\n      setPrincipalPaidArray([...principalPaidArray, principalPaid]);\n      setInterestPaidArray([...interestPaidArray, paymentInterestPaid]);\n      setNewEndingPrincipalArray([...newEndingPrincipalArray, balance]);\n      let monthDateIndex =\n          monthDate.length - Math.floor(monthDate.length / 12) * 12;\n      setMonthDate([...monthDate, monthArray[monthDateIndex]]);\n    };\n\n    switch (true) {\n      case (newEndingPrincipalArray.length < 1):\n        setNewEndingPrincipalArray([principal]);\n        break;\n      case (currentPrincipal > monthlyPayment &&\n          newEndingPrincipalArray.length >= 1):\n        processPayment();\n        break;\n      case (currentPrincipal < monthlyPayment) :\n        processLastPayment();\n        break;\n      case (newEndingPrincipalArray[newEndingPrincipalArray.length - 1] <= 0):\n        break;\n      default:\n        break;\n    }\n\n    if (extraNewEndingPrincipalArray.length < 1) {\n      setExtraNewEndingPrincipalArray([principal]);\n    }\n\n    //extra payment calculations\n    let extraCurrentPrincipal =\n        extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length - 1];\n    let extraMonthlyPaymentCal = monthlyPayment + extraPayment;\n    if (extraCurrentPrincipal > monthlyPayment + extraPayment) {\n      let extraPaymentInterestPaid = numberConverter(\n          extraCurrentPrincipal * ((interestRate * 0.01) / 12),\n      );\n      let extraPrincipalPaid = numberConverter(\n          extraMonthlyPaymentCal - extraPaymentInterestPaid,\n      );\n      let extraBalance = numberConverter(\n          extraCurrentPrincipal - extraPrincipalPaid,\n      );\n\n      setExtraPrincipalPaidArray([\n        ...extraPrincipalPaidArray,\n        extraPrincipalPaid,\n      ]);\n      setExtraInterestPaidArray([\n        ...extraInterestPaidArray,\n        extraPaymentInterestPaid,\n      ]);\n\n      setExtraNewEndingPrincipalArray([\n        ...extraNewEndingPrincipalArray,\n        extraBalance,\n      ]);\n    }\n    // }\n  };\n\n  const handleResetMortgageAmount = (e) => {\n    setMortgage(e);\n    setPrincipal(e);\n  };\n\n  const handleResetInterestRate = (e) => {\n    setInterest(e);\n    setInterestRate(e);\n  };\n\n  const handleResetMonthlyPayment = (e) => {\n    setMonthlyPayment(e);\n    setBankPayment(e);\n  };\n\n  useEffect(()=>{\n    if(newEndingPrincipalArray.length>=1 && newEndingPrincipalArray[newEndingPrincipalArray.length-1]>0){\n      setTimeout(generateCalculation, 1000);\n    }\n  }, [newEndingPrincipalArray]);\n\n  return (\n      <section className=\"App\">\n        <div id=\"inputSection\">\n          <form className=\"inputForm\">\n            <label className=\"inputSection\">\n              Mortage:\n              {(newEndingPrincipalArray.length <= 1 && (\n                  <input\n                      type=\"number\"\n                      name=\"Mortgage\"\n                      value={mortgage}\n                      onChange={(e) =>\n                          handleResetMortgageAmount(e.currentTarget.value)\n                      }\n                  ></input>\n              )) || <span>{mortgage}</span>}\n            </label>\n            <label className=\"inputSection\">\n              Interest Rate:\n              {(newEndingPrincipalArray.length <= 1 && (\n                  <input\n                      type=\"number\"\n                      name=\"Interest\"\n                      value={interest}\n                      onChange={(e) => handleResetInterestRate(e.currentTarget.value)}\n                  ></input>\n              )) || <span>{interest}</span>}\n            </label>\n            <label className=\"inputSection\">\n              Monthly Payment:\n              {(newEndingPrincipalArray.length <= 1 && (\n                  <input\n                      type=\"number\"\n                      name=\"MonthlyPayment\"\n                      value={monthlyPayment}\n                      onChange={(e) =>\n                          handleResetMonthlyPayment(e.currentTarget.value)\n                      }\n                  ></input>\n              )) || <span>{monthlyPayment}</span>}\n            </label>\n          </form>\n        </div>\n        {(newEndingPrincipalArray[newEndingPrincipalArray.length - 1] > 0 ||\n            newEndingPrincipalArray[newEndingPrincipalArray.length - 1] ===\n            undefined) && (\n            <button onClick={() => generateCalculation()}>Calculate</button>\n        )}\n\n        <button onClick={() => window.location.reload()}>Reset Numbers</button>\n        <RevealData interestPaidArray={interestPaidArray} mortgage={mortgage} />\n        <div id=\"flexTable\">\n          <div className=\"tableCell\">Date</div>\n          <div className=\"tableCell\">\n            Principal\n            <div className=\"cellDetails\">{mortgage}</div>\n            {newEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n          <div className=\"tableCell\">\n            Monthly Payment\n            {newEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {monthlyPayment}\n                </div>\n            ))}\n          </div>\n          {/*<div className=\"tableCell\">*/}\n          {/*  Extra Monthly Payment*/}\n          {/*  {newEndingPrincipalArray.map((value, index)=>(*/}\n          {/*      <div className=\"cellDetails\" key={index}>*/}\n          {/*        {extraPayment}*/}\n          {/*      </div>*/}\n          {/*  ))}*/}\n          {/*</div>*/}\n          <div className=\"tableCell bottomCell\">\n            Interest Paid\n            <div className=\"cellDetails\">-</div>\n            {interestPaidArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n          <div className=\"tableCell\">\n            Principal Paid\n            <div className=\"cellDetails\">-</div>\n            {principalPaidArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n\n          <div className=\"tableCell\">\n            Ending Principal\n            {newEndingPrincipalArray.map((value, index) => (\n                <div className=\"cellDetails\" key={index}>\n                  {value}\n                </div>\n            ))}\n          </div>\n        </div>\n        <Footer/>\n      </section>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}